import * as Cesium from 'cesium';
import { AxisType } from './type';
export default class BaseAxis {
    constructor({ scene, boundingSphere }) {
        this.axisId = [AxisType.X, AxisType.Y, AxisType.Z];
        this.axisColor = [Cesium.Color.RED, Cesium.Color.GREEN, Cesium.Color.BLUE];
        this.directions = [
            Cesium.Cartesian3.UNIT_X,
            Cesium.Cartesian3.UNIT_Y,
            Cesium.Cartesian3.UNIT_Z
        ];
        this.relativeDirections = [
            Cesium.Cartesian3.UNIT_X,
            Cesium.Cartesian3.UNIT_Y,
            Cesium.Cartesian3.UNIT_Z
        ];
        this.directionsWithLength = [
            Cesium.Cartesian3.UNIT_X,
            Cesium.Cartesian3.UNIT_Y,
            Cesium.Cartesian3.UNIT_Z
        ];
        this.rays = [];
        this.endPoints = [];
        this.axises = [];
        this.cachedScaleMatrix = [];
        this.cachedRotationMatrix = Cesium.Matrix4.IDENTITY.clone();
        this.cachedTranslationMatrix = [];
        this.center = boundingSphere.center;
        this.radius = Math.max(boundingSphere.radius * 0.5, 10);
        this.boundingSphere = boundingSphere;
        this.scene = scene;
        const matrix = Cesium.Transforms.eastNorthUpToFixedFrame(this.center);
        const directions = this.axisId.map((_, index) => {
            const direction4 = Cesium.Matrix4.getColumn(matrix, index, new Cesium.Cartesian4());
            return Cesium.Cartesian3.fromCartesian4(direction4, new Cesium.Cartesian3());
        });
        this.directions = directions;
        const rays = directions.map((direction) => {
            return new Cesium.Ray(this.center, direction);
        });
        this.rays = rays;
        const endPoints = rays.map((ray) => {
            return Cesium.Ray.getPoint(ray, this.radius);
        });
        this.endPoints = endPoints;
        const directionsWithLength = directions.map((direction) => {
            return Cesium.Cartesian3.multiplyByScalar(direction.clone(), this.radius, new Cesium.Cartesian3());
        });
        this.directionsWithLength = directionsWithLength;
        this.initCachedMatrix();
    }
    updateDirections(directions) {
        this.directions = directions;
    }
    initCachedMatrix() {
        this.directions.forEach((_, index) => {
            const cachedInitialMatrix = Cesium.Matrix4.IDENTITY.clone();
            this.cachedScaleMatrix[index] = cachedInitialMatrix;
            this.cachedTranslationMatrix[index] = cachedInitialMatrix;
        });
        this.cachedRotationMatrix = Cesium.Matrix4.IDENTITY.clone();
    }
    destory() {
        this.axises.forEach((axis) => {
            this.scene.primitives.remove(axis);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZUF4aXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmFzZUF4aXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFDaEMsT0FBTyxFQUFlLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUU5QyxNQUFNLENBQUMsT0FBTyxPQUFPLFFBQVE7SUF3QzNCLFlBQVksRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFlO1FBakMzQyxXQUFNLEdBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXpELGNBQVMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFckUsZUFBVSxHQUF3QjtZQUN2QyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU07WUFDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1lBQ3hCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTTtTQUN6QixDQUFBO1FBRU0sdUJBQWtCLEdBQXdCO1lBQy9DLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUN4QixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU07WUFDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1NBQ3pCLENBQUE7UUFFTSx5QkFBb0IsR0FBd0I7WUFDakQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1lBQ3hCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUN4QixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU07U0FDekIsQ0FBQTtRQUVNLFNBQUksR0FBaUIsRUFBRSxDQUFBO1FBRXZCLGNBQVMsR0FBd0IsRUFBRSxDQUFBO1FBQ25DLFdBQU0sR0FBdUIsRUFBRSxDQUFBO1FB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