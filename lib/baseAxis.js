import * as Cesium from 'cesium';
export var AxisType;
(function (AxisType) {
    AxisType[AxisType["X"] = 0] = "X";
    AxisType[AxisType["Y"] = 1] = "Y";
    AxisType[AxisType["Z"] = 2] = "Z";
})(AxisType || (AxisType = {}));
export default class BaseAxis {
    constructor({ scene, boundingSphere }) {
        this.endPoint = Cesium.Cartesian3.ZERO;
        this.axisId = [AxisType.X, AxisType.Y, AxisType.Z];
        this.axisColor = [Cesium.Color.RED, Cesium.Color.GREEN, Cesium.Color.BLUE];
        this.directions = [
            Cesium.Cartesian3.UNIT_X,
            Cesium.Cartesian3.UNIT_Y,
            Cesium.Cartesian3.UNIT_Z
        ];
        this.relativeDirections = [
            Cesium.Cartesian3.UNIT_X,
            Cesium.Cartesian3.UNIT_Y,
            Cesium.Cartesian3.UNIT_Z
        ];
        this.axises = [];
        this.center = boundingSphere.center;
        this.radius = Math.max(boundingSphere.radius * 0.5, 10);
        this.boundingSphere = boundingSphere;
        this.scene = scene;
        const matrix = Cesium.Transforms.eastNorthUpToFixedFrame(this.center);
        const directions = this.axisId.map((_, index) => {
            const direction4 = Cesium.Matrix4.getColumn(matrix, index, new Cesium.Cartesian4());
            return Cesium.Cartesian3.fromCartesian4(direction4, new Cesium.Cartesian3());
        });
        this.directions = directions;
        this.relativeDirections = directions;
    }
    updateDirections(directions) {
        this.directions = directions;
    }
    destory() {
        this.axises.forEach((axis) => {
            this.scene.primitives.remove(axis);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZUF4aXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmFzZUF4aXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFRaEMsTUFBTSxDQUFOLElBQVksUUFJWDtBQUpELFdBQVksUUFBUTtJQUNsQixpQ0FBSyxDQUFBO0lBQ0wsaUNBQUssQ0FBQTtJQUNMLGlDQUFLLENBQUE7QUFDUCxDQUFDLEVBSlcsUUFBUSxLQUFSLFFBQVEsUUFJbkI7QUFFRCxNQUFNLENBQUMsT0FBTyxPQUFPLFFBQVE7SUE0QjNCLFlBQVksRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFlO1FBekIzQyxhQUFRLEdBQXNCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFBO1FBTXBELFdBQU0sR0FBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFekQsY0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVyRSxlQUFVLEdBQXdCO1lBQ3ZDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUN4QixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU07WUFDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1NBQ3pCLENBQUE7UUFFTSx1QkFBa0IsR0FBd0I7WUFDL0MsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1lBQ3hCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTTtZQUN4QixNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU07U0FDekIsQ0FBQTtRQUNNLFdBQU0sR0FBdUIsRUFBRSxDQUFBO1FBS3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQTtRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDdkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUE7UUFFcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFckUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDOUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQ3pDLE1BQU0sRUFDTixLQUFLLEVBQ0wsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQ3hCLENBQUE7WUFDRCxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUNyQyxVQUFVLEVBQ1YsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQ3hCLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO1FBQzVCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxVQUFVLENBQUE7SUFDdEMsQ0FBQztJQUVNLGdCQUFnQixDQUFDLFVBQStCO1FBQ3JELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO0lBQzlCLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDcEMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YifQ==